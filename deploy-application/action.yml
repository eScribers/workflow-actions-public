name: "Run e2e test"
description: "Run tests..."
inputs:
  git-reference:
    description: 'Git reference from where it should be deployed'
    default: "master"
    required: true
  docker-path:
    description: 'Path where dockerfile located'
    default: "/home/runner/work/tabula-automation-tests/tabula-automation-tests/"
    required: true
  tempenv-version:
    description: 'The dotnet version to use'
    default: "testenv-e2e-2"
    required: true
  db-password:
    description: 'DB Password from secrets'
    required: true
  db-user:
    description: 'DB User from secrets'
    required: true
  db-database:
    description: 'DB  from secrets'
    required: true
  access-key:
    description: 'AWS Access Key from secrets'
    required: true
  secret-key:
    description: 'AWS Secret Key from secrets'
    required: true
  default-region:
    description: 'AWS Default Region from secrets'
    required: true
  account-id:
    description: 'AWS Account ID for ECR  from secrets'
    required: true
  oleksb-key:
    description: 'Public key for adding to server from secrets'
    required: true
  inf-logzio-token:
    description: 'Public key for adding to server from secrets'
    required: true
  twilio-sid:
    description: 'Public key for adding to server from secrets'
    required: true
  twilio-token:
    description: 'Public key for adding to server from secrets'
    required: true
  twilio-sip-cl:
    description: 'Public key for adding to server from secrets'
    required: true
  twilio-video-sid:
    description: 'Public key for adding to server from secrets'
    required: true
  twilio-video-token:
    description: 'Public key for adding to server from secrets'
    required: true
  postmarkapp-api-key:
    description: 'Public key for adding to server from secrets'
    required: true
  loggly-key:
    description: 'Public key for adding to server from secrets'
    required: true
  fussion-api-key:
    description: 'Public key for adding to server from secrets'
    required: true
  vieoapp-secret-key:
    description: 'Public key for adding to server from secrets'
    required: true
  encryption-key:
    description: 'Public key for adding to server from secrets'
    required: true
  doe-google-spreadsheet-id:
    description: 'Public key for adding to server from secrets'
    required: true
  doe-google-spreadsheet-ho:
    description: 'Public key for adding to server from secrets'
    required: true
  doe-google-spreadsheet-ar:
    description: 'Public key for adding to server from secrets'
    required: true
  doe-google-spreadsheet-oa:
    description: 'Public key for adding to server from secrets'
    required: true
  token:
    description: 'Token to github'
    required: true
  tabula-login:
    description: 'Login to tabula portal'
    required: false
  tabula-password:
    description: 'Password to tabula portal'
    required: false

runs:
  using: "composite"
  steps: 
    - name: Checkout tabula infra repo
      uses: actions/checkout@master
      with:
        repository: eScribers/tabula
        ref: refs/heads/${{ inputs.git-reference }}
        token: ${{ inputs.token }}

    - name: Define variables 
      run: |
           echo "TEMPENV_VERSION=${{ inputs.tempenv-version }}" >> $GITHUB_ENV
           echo "ENVIRONMENT=${{ inputs.tempenv-version }}" >> $GITHUB_ENV
           echo "SANDBOX_DB_PASSWORD=${{ inputs.db-password }}" >> $GITHUB_ENV
           echo "SANDBOX_DB_USER=${{ inputs.db-user }}" >> $GITHUB_ENV
           echo "SANDBOX_DB_DATABASE=${{ inputs.db-database }}" >> $GITHUB_ENV
           echo "AWS_ACCESS_KEY_ID=${{ inputs.access-key }}" >> $GITHUB_ENV
           echo "AWS_SECRET_ACCESS_KEY=${{ inputs.secret-key }}" >> $GITHUB_ENV
           echo "AWS_DEFAULT_REGION=${{ inputs.default-region }}" >> $GITHUB_ENV
           echo "RESOURCES_AWS_ACCOUNT_ID=${{ inputs.account-id }}" >> $GITHUB_ENV
           echo "INF_LOGZIO_TOKEN=${{ inputs.inf-logzio-token }}" >> $GITHUB_ENV
           echo "TWILIO_SID=${{ inputs.twilio-sid }}" >> $GITHUB_ENV
           echo "TWILIO_TOKEN=${{ inputs.twilio-token }}" >> $GITHUB_ENV
           echo "TWILIO_SIP_CL=${{ inputs.twilio-sip-cl }}" >> $GITHUB_ENV
           echo "TWILIO_VIDEO_SID=${{ inputs.twilio-video-sid }}" >> $GITHUB_ENV
           echo "TWILIO_VIDEO_TOKEN=${{ inputs.twilio-video-token }}" >> $GITHUB_ENV
           echo "POSTMARKAPP_API_KEY=${{ inputs.postmarkapp-api-key }}" >> $GITHUB_ENV
           echo "LOGGLY_KEY=${{ inputs.loggly-key }}" >> $GITHUB_ENV
           echo "FUSION_API_KEY=${{ inputs.fussion-api-key }}" >> $GITHUB_ENV
           echo "VIDEOAPP_SECRET_KEY=${{ inputs.vieoapp-secret-key }}" >> $GITHUB_ENV
           echo "ENCRYPTION_KEY=${{ inputs.encryption-key }}" >> $GITHUB_ENV
           echo "DOE_GOOGLE_SPREADSHEET_ID=${{ inputs.doe-google-spreadsheet-id }}" >> $GITHUB_ENV
           echo "DOE_GOOGLE_SPREADSHEET_HO=${{ inputs.doe-google-spreadsheet-ho }}" >> $GITHUB_ENV
           echo "DOE_GOOGLE_SPREADSHEET_AR=${{ inputs.doe-google-spreadsheet-ar }}" >> $GITHUB_ENV
           echo "DOE_GOOGLE_SPREADSHEET_OA=${{ inputs.doe-google-spreadsheet-oa }}" >> $GITHUB_ENV
           echo "ENV_NAME=${{ inputs.tempenv-version }}" >> $GITHUB_ENV
           echo "COOKIE_DOMAIN=escribers.io" >> $GITHUB_ENV
      shell: bash

    - name: Download private_ip
      uses: actions/download-artifact@v1
      with:
        name: private_ip

    - name: Download public_ip
      uses: actions/download-artifact@v1
      with:
        name: public_ip

    - name: Download private_key
      uses: actions/download-artifact@v1
      with:
        name: private_key

    - name: Define variables for VPN servers
      run: |
        echo "VPN_SERVER_PRIVATE_IP=$(cat private_ip/private_ip)" >> $GITHUB_ENV
        echo "VPN_SERVER_PUBLIC_IP=$(cat public_ip/public_ip)" >> $GITHUB_ENV
      shell: bash

    - name: check variables
      run: |
        echo $VPN_SERVER_PUBLIC_IP
        echo =====================================
        echo $VPN_SERVER_PRIVATE_IP
      env:
        VPN_SERVER_PRIVATE_IP: "${{ env.VPN_SERVER_PRIVATE_IP }}" 
        VPN_SERVER_PUBLIC_IP: "${{ env.VPN_SERVER_PUBLIC_IP }}" 
      shell: bash

    - name: Get VPN Profile
      run: |
        chmod 600 private_key/private_key
        scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i private_key/private_key ubuntu@${{ env.VPN_SERVER_PUBLIC_IP }}:/home/ubuntu/client.ovpn ./client.ovpn
      shell: bash

    - name: Define variables depends on env
      run: |
           echo "RDS_INSTANCE_NAME=${{ env.TEMPENV_VERSION }}-tabula" >> $GITHUB_ENV
           echo "ELB_NAME=${{ env.TEMPENV_VERSION }}-elb-tabula" >> $GITHUB_ENV
           echo "RESOURCES_DEFAULT_REGION=${{ env.AWS_DEFAULT_REGION }}" >> $GITHUB_ENV
           echo "DB_DEFAULT_PASSWORD=${{ env.SANDBOX_DB_PASSWORD }}" >> $GITHUB_ENV
           echo "DB_READ_PASSWORD=${{ env.SANDBOX_DB_PASSWORD }}" >> $GITHUB_ENV
           echo "DB_REP_PASSWORD=${{ env.SANDBOX_DB_PASSWORD }}" >> $GITHUB_ENV
           echo "DB_DEFAULT_USER=${{ env.SANDBOX_DB_USER }}" >> $GITHUB_ENV
           echo "DB_READ_USER=${{ env.SANDBOX_DB_USER }}" >> $GITHUB_ENV
           echo "DB_REP_USER=${{ env.SANDBOX_DB_USER }}" >> $GITHUB_ENV
           echo "DB_DEFAULT_DATABASE=${{ env.SANDBOX_DB_DATABASE }}" >> $GITHUB_ENV
           echo "DB_READ_DATABASE=${{ env.SANDBOX_DB_DATABASE }}" >> $GITHUB_ENV
           echo "DB_REP_DATABASE=${{ env.SANDBOX_DB_DATABASE }}" >> $GITHUB_ENV
           echo "TAB_FRONTEND_URL=https://tabula-frontend-sandbox-aws-us-east-1.s3.amazonaws.com" >> $GITHUB_ENV
           echo "Deploy to ${{ env.TEMPENV_VERSION }}"
      shell: bash

    - name: Define environment bucket depends on env
      run: |
        if [[ "${{ env.TEMPENV_VERSION }}" != 'production' ]]; then
           echo "ENVIRONMENT_BUCKET=${{ env.TEMPENV_VERSION }}-" >> $GITHUB_ENV
           echo "Deploy to noPRODUCTION"
        elif [[ "${{ env.TEMPENV_VERSION }}" == 'production' ]]; then
           echo "ENVIRONMENT_BUCKET=" >> $GITHUB_ENV
           echo "Deploy to PRODUCTION"
        else
           echo "Nothing to deploy"
           exit 1
        fi
      shell: bash

    - name: "Create Docker image and push it to ECR repository"
      uses: "kciter/aws-ecr-action@v4"
      with:
        access_key_id: "${{ env.AWS_ACCESS_KEY_ID }}"
        secret_access_key: "${{ env.AWS_SECRET_ACCESS_KEY }}"
        account_id: "${{ env.RESOURCES_AWS_ACCOUNT_ID }}"
        create_repo: 'false'
        dockerfile: Dockerfile.deploy
        extra_build_args: ''
        path: ${{ inputs.docker-path }}
        region: "${{ env.AWS_DEFAULT_REGION }}"
        repo: "${{ env.ENVIRONMENT }}/tabula"
        tags: "latest,${{ github.sha }}"

    - name: Install OpenVPN
      run: sudo apt-cache policy  openvpn && sudo apt-get --fix-missing --assume-yes --no-install-recommends install openvpn=2.4.7-1ubuntu2
      shell: bash

    - name: Connect VPN
      run: sudo openvpn --config "client.ovpn" --daemon
      shell: bash

    - name: Wait for a VPN connection
      run: until ping -c1 "${{ env.VPN_SERVER_PRIVATE_IP }}"; do sleep 2; done
      shell: bash

    - name: Add credentials to Amazon 
      uses: "aws-actions/configure-aws-credentials@v1"
      with:
        aws-access-key-id: "${{ env.AWS_ACCESS_KEY_ID }}"
        aws-region: "${{ env.AWS_DEFAULT_REGION }}"
        aws-secret-access-key: "${{ env.AWS_SECRET_ACCESS_KEY }}"

    - name: Get instancesIDs
      run: echo "WORKER_INSTANCE_IDs=$(aws elb describe-load-balancers --load-balancer-names $ELB_NAME --output json --query "LoadBalancerDescriptions[*].Instances[*].InstanceId" | jq -r '. | map(.[])| @csv' | tr -d '"')" >> $GITHUB_ENV
      shell: bash

    - name: Get instances IPs
      run: echo "WORKER_LIST_IPS=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=${{ env.TEMPENV_VERSION }}-Webserver-*" --query 'Reservations[*].Instances[*].[PrivateIpAddress]' | jq -r '.| .[] |.[]|.[]' | paste -sd, -)" >> $GITHUB_ENV
      shell: bash

    - name: Get RDS instance endpoint
      run: echo "RDS_ENDPOINT=$(aws rds describe-db-instances --db-instance-identifier $RDS_INSTANCE_NAME --query 'DBInstances[*].Endpoint.Address' | jq -r '.[]')" >> $GITHUB_ENV
      shell: bash

    - name: Define variables for DB for static envs
      if: ${{ startsWith(inputs.tempenv-version, 'prep-02') || startsWith(inputs.tempenv-version, 'sandbox') || startsWith(inputs.tempenv-version, 'production') }}
      run: |
           echo "DB_DEFAULT_DATABASE=${{ env.DB_DEFAULT_DATABASE }}" >> $GITHUB_ENV
           echo "DB_READ_DATABASE=${{ env.DB_READ_DATABASE }}" >> $GITHUB_ENV
           echo "DB_REP_DATABASE=${{ env.DB_REP_DATABASE }}" >> $GITHUB_ENV
           echo "Deploy to static envs"
      shell: bash

    - name: Define variables for DB for tempenvs
      if: ${{ inputs.tempenv-version == 'testenv-e2e-2' || startsWith(inputs.tempenv-version, 'e2e-') }}
      run: |
           echo "DB_DEFAULT_DATABASE=${{ env.ENV_NAME }}-${{ env.DB_DEFAULT_DATABASE }}" >> $GITHUB_ENV
           echo "DB_READ_DATABASE=${{ env.ENV_NAME }}-${{ env.DB_READ_DATABASE }}" >> $GITHUB_ENV
           echo "DB_REP_DATABASE=${{ env.ENV_NAME }}-${{ env.DB_REP_DATABASE }}" >> $GITHUB_ENV
           echo "RDS_ENDPOINT=tabula-testenv-shared-db.cxasnj3we6wl.us-east-1.rds.amazonaws.com" >> $GITHUB_ENV
           echo "Deploy to tempenvs "
      shell: bash

####################
    - name: Setup create_db.php file
      uses: cuchi/jinja2-action@v1.2.0
      with:
        template: ./.github/scripts/create_db.php
        output_file: ./application/config/create_db.php
        strict: true
        variables: |
          DB_DEFAULT_PASSWORD=${{ env.DB_DEFAULT_PASSWORD }}
          DB_DEFAULT_USER=${{ env.DB_DEFAULT_USER }}
          DB_DEFAULT_DATABASE=${{ env.ENV_NAME }}-${{ env.DB_DEFAULT_DATABASE }}
          RDS_ENDPOINT=tabula-testenv-shared-db.cxasnj3we6wl.us-east-1.rds.amazonaws.com

    - name: Setup delete_db.php file
      uses: cuchi/jinja2-action@v1.2.0
      with:
        template: ./.github/scripts/delete_db.php
        output_file: ./application/config/delete_db.php
        strict: true
        variables: |
          DB_DEFAULT_PASSWORD=${{ env.DB_DEFAULT_PASSWORD }}
          DB_DEFAULT_USER=${{ env.DB_DEFAULT_USER }}
          DB_DEFAULT_DATABASE=${{ env.ENV_NAME }}-${{ env.DB_DEFAULT_DATABASE }}
          RDS_ENDPOINT=tabula-testenv-shared-db.cxasnj3we6wl.us-east-1.rds.amazonaws.com

    - name: Setup env file
      uses: cuchi/jinja2-action@v1.2.0
      with:
        template: ./application/config/env.j2
        output_file: ./application/config/env
        strict: true
        variables: |
          ENVIRONMENT_BUCKET=${{ env.ENVIRONMENT_BUCKET }}
          DB_DEFAULT_PASSWORD=${{ env.DB_DEFAULT_PASSWORD }}
          DB_READ_PASSWORD=${{ env.DB_READ_PASSWORD }}
          DB_REP_PASSWORD=${{ env.DB_REP_PASSWORD }}
          DB_DEFAULT_USER=${{ env.DB_DEFAULT_USER }}
          DB_READ_USER=${{ env.DB_READ_USER }}
          DB_REP_USER=${{ env.DB_REP_USER }}
          DB_DEFAULT_DATABASE=${{ env.DB_DEFAULT_DATABASE }}
          DB_READ_DATABASE=${{ env.DB_READ_DATABASE }}
          DB_REP_DATABASE=${{ env.DB_REP_DATABASE }}
          INF_LOGZIO_TOKEN=${{ env.INF_LOGZIO_TOKEN }}
          ELB_DNS=tabula-${{ env.ENV_NAME }}-aws.escribers.io
          RDS_ENDPOINT=${{ env.RDS_ENDPOINT }}
          TWILIO_SID=${{ env.TWILIO_SID }}
          TWILIO_TOKEN=${{ env.TWILIO_TOKEN }}
          TWILIO_SIP_CL=${{ env.TWILIO_SIP_CL }}
          TWILIO_VIDEO_SID=${{ env.TWILIO_VIDEO_SID }}
          TWILIO_VIDEO_TOKEN=${{ env.TWILIO_VIDEO_TOKEN }}
          POSTMARKAPP_API_KEY=${{ env.POSTMARKAPP_API_KEY }}
          LOGGLY_KEY=${{ env.LOGGLY_KEY }}
          FUSION_API_KEY=${{ env.FUSION_API_KEY }}
          VIDEOAPP_SECRET_KEY=${{ env.VIDEOAPP_SECRET_KEY }}
          ENCRYPTION_KEY=${{ env.ENCRYPTION_KEY }}
          TABULA_AWS_ACCESS_KEY_ID=${{ env.AWS_ACCESS_KEY_ID }}
          TABULA_AWS_SECRET_ACCESS_KEY=${{ env.AWS_SECRET_ACCESS_KEY }}
          COOKIE_DOMAIN=${{ env.COOKIE_DOMAIN }}
          DOE_GOOGLE_SPREADSHEET_ID=${{ env.DOE_GOOGLE_SPREADSHEET_ID }}
          DOE_GOOGLE_SPREADSHEET_HO=${{ env.DOE_GOOGLE_SPREADSHEET_HO }}
          DOE_GOOGLE_SPREADSHEET_AR=${{ env.DOE_GOOGLE_SPREADSHEET_AR }}
          DOE_GOOGLE_SPREADSHEET_OA=${{ env.DOE_GOOGLE_SPREADSHEET_OA }}
          FRONTEND_URL=${{ env.TAB_FRONTEND_URL }}



####################
##### Execute Deploy Command  ####
####################
    - name: Show variable
      run: echo "${{ env.WORKER_LIST_IPS }}"
      shell: bash

    - name: Split version code
      uses: xom9ikk/split@v1
      id: split
      with:
        string: "${{ env.WORKER_LIST_IPS }}"
        separator: ','
        limit: -1

    - name: Execute Deploy Command №1
      uses: eScribers/workflow-actions-public/execute-deploy@master
      with:
        host_ip: ${{ steps.split.outputs._0 }}
        oleksb-key: ${{ inputs.oleksb-key }}
        access-key: ${{ env.AWS_ACCESS_KEY_ID }}
        secret-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        account-id: ${{ env.RESOURCES_AWS_ACCOUNT_ID }}
        default-region: ${{ env.AWS_DEFAULT_REGION }}
        tempenv-version: ${{ env.ENV_NAME }}
        token: ${{ inputs.token }}  
        
    - name: Execute Deploy Command №2
      uses: eScribers/workflow-actions-public/execute-deploy@master
      with:
        host_ip: ${{ steps.split.outputs._1 }}
        oleksb-key: ${{ inputs.oleksb-key }}
        access-key: ${{ env.AWS_ACCESS_KEY_ID }}
        secret-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        account-id: ${{ env.RESOURCES_AWS_ACCOUNT_ID }}
        default-region: ${{ env.AWS_DEFAULT_REGION }}
        tempenv-version: ${{ env.ENV_NAME }}
        token: ${{ inputs.token }}

    - name: Execute Deploy Command №3
      uses: eScribers/workflow-actions-public/execute-deploy@master
      with:
        host_ip: ${{ steps.split.outputs._2 }}
        oleksb-key: ${{ inputs.oleksb-key }}
        access-key: ${{ env.AWS_ACCESS_KEY_ID }}
        secret-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        account-id: ${{ env.RESOURCES_AWS_ACCOUNT_ID }}
        default-region: ${{ env.AWS_DEFAULT_REGION }}
        tempenv-version: ${{ env.ENV_NAME }}
        token: ${{ inputs.token }}

    - name: Add Demo User
      uses: appleboy/ssh-action@master
      if: ${{ inputs.tempenv-version != 'production' }}
      # if: ${{ inputs.tempenv-version == 'testenv-e2e-2' || startsWith(inputs.tempenv-version, 'e2e-') }}
      with:
        host: ${{ env.WORKER_LIST_IPS }}
        username: ubuntu
        key: ${{ inputs.oleksb-key }}
        port: 22
        script: |
          whoami
          sudo docker exec tabula_backend php index.php dbSetup createManager ${{ inputs.tabula-login }} ${{ inputs.tabula-password }} test.test.com "Test User Manager"
        shell: bash

####################
##### RUN TESTS  ####
####################
    - name: Run tests
      uses: eScribers/workflow-actions-public/e2e-tests@master
      with:
        backend-url: "https://${{ env.ELB_DNS }}"
        tabula-login: ${{ inputs.tabula-login }}
        tabula-password: ${{ inputs.tabula-password }}
        access-key: ${{ env.AWS_ACCESS_KEY_ID }}
        secret-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        token: ${{ inputs.token }}  

####################  

    - name: Output credentials
      run: |
        echo "===Show client.ovpn profile==="
        cat ./client.ovpn || true
        echo "=============================="
        echo "===Show URL profile==="
        echo "tabula-${{ env.ENV_NAME }}-aws.escribers.io"
        echo "=============================="
        echo "===Show Server IPs==="
        echo "$WORKER_LIST_IPS"
        echo "=============================="
      env:
        ENV_NAME: "${{ env.ENV_NAME }}"
        WORKER_LIST_IPS: "${{ env.WORKER_LIST_IPS }}"
      shell: bash

    - name: Kill VPN connection
      if: always()
      run: |
        sudo killall openvpn   
      shell: bash
