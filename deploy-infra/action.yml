name: "Run e2e test"
description: "Run tests..."
inputs:
  tempenv-version:
    description: 'Verstion of temp env (tag)'
    required: true
  access-key:
    description: 'AWS Access Key'
    required: true
  secret-key:
    description: 'AWS Secret Key'
    required: true
  default-region:
    description: 'AWS Default region'
    required: true
  token:
    description: 'Token to github'
    required: true
  git-reference:
    description: 'Git reference from where it should be deployed'
    default: "refs/heads/master"


runs:
  using: "composite"
  steps: 
    - name: Define variables 
      run: |
           echo "TEMPENV_VERSION=${{ inputs.tempenv-version }}" | sed -e 's/^TEMPENV_VERSION=-e2e/TEMPENV_VERSION=e2e/g'
           echo "AWS_ACCESS_KEY_ID=${{ inputs.access-key }}" >> $GITHUB_ENV
           echo "AWS_SECRET_ACCESS_KEY=${{ inputs.secret-key }}" >> $GITHUB_ENV
           echo "AWS_DEFAULT_REGION=${{ inputs.default-region }}" >> $GITHUB_ENV
      shell: bash
#############################

#############################
    - name: Checkout devops infra repo
      uses: actions/checkout@master
      with:
        repository: eScribers/DEVOPS
        ref: ${{ inputs.git-reference }}
        token: ${{ inputs.token }}



    - name: Intall terraform
      run: |
        which terraform
        sudo dpkg --list
        sudo rm /usr/local/bin/terraform
        curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
        sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
        sudo apt-get update
        sudo apt-get install terraform=0.14.10  
        which terraform
      shell: bash

    - name: Check terraform version
      run: terraform --version
      shell: bash

    - name: Create DynamoDB lock table
      run: |
        aws dynamodb create-table --table-name lock-dynamo$ENV_NAME-terraform-state \
          --attribute-definitions \
            AttributeName=LockID,AttributeType=S \
          --provisioned-throughput \
            ReadCapacityUnits=20,WriteCapacityUnits=20 \
          --key-schema \
            AttributeName=LockID,KeyType=HASH || true
      env:
        TEMPENV_VERSION: "${{ env.TEMPENV_VERSION }}"
      shell: bash

    - name: Deploy infrastructure
      # if: always()
      run: |
        terraform -chdir=./infrastructure init -backend-config="bucket=escribers-infra-tempenv-terraform-state" -backend-config="key=$TEMPENV_VERSION.tfstate" -backend-config="dynamodb_table=lock-dynamo$ENV_NAME-terraform-state"
        terraform -chdir=./infrastructure apply -auto-approve 
        echo "VPN_SERVER_PRIVATE_IP=$(cat infrastructure/private_ip)" >> $GITHUB_ENV
        echo "VPN_SERVER_PUBLIC_IP=$(cat infrastructure/public_ip)" >> $GITHUB_ENV
      env:
        AWS_ACCESS_KEY_ID: "${{ env.AWS_ACCESS_KEY_ID }}"
        AWS_SECRET_ACCESS_KEY: "${{ env.AWS_SECRET_ACCESS_KEY }}"
        AWS_DEFAULT_REGION: "${{ env.AWS_DEFAULT_REGION }}"    
        TF_VAR_aws_region: "${{ env.AWS_DEFAULT_REGION }}" 
        TF_VAR_env_name: "${{ env.TEMPENV_VERSION }}"
        TF_VAR_do_migration: "false"
        TF_VAR_deletion_protection: "false"
        TF_VAR_instance_count: "3"
        TEMPENV_VERSION: "${{ env.TEMPENV_VERSION }}"
      shell: bash

    - name: Define variables for VPN servers
      run: |
        echo "VPN_SERVER_PRIVATE_IP=$(cat infrastructure/private_ip)" >> $GITHUB_ENV
        echo "VPN_SERVER_PUBLIC_IP=$(cat infrastructure/public_ip)" >> $GITHUB_ENV
      shell: bash

    - name: Get VPN Profile
      run: |
        echo $VPN_SERVER_PUBLIC_IP
        echo =====================================
        echo $VPN_SERVER_PRIVATE_IP
      env:
        VPN_SERVER_PRIVATE_IP: "${{ env.VPN_SERVER_PRIVATE_IP }}" 
        VPN_SERVER_PUBLIC_IP: "${{ env.VPN_SERVER_PUBLIC_IP }}" 
      shell: bash

    - name: Upload private_ip
      uses: actions/upload-artifact@v1
      with:
        name: private_ip
        path: infrastructure/private_ip
          
    - name: Upload public_ip
      uses: actions/upload-artifact@v1
      with:
        name: public_ip
        path: infrastructure/public_ip



