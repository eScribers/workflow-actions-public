name: "Run e2e test"
description: "Run tests..."
inputs:
  tempenv-version:
    description: 'Verstion of temp env (tag)'
    required: true
  access-key:
    description: 'AWS Access Key'
    required: true
  secret-key:
    description: 'AWS Secret Key'
    required: true
  default-region:
    description: 'AWS Default region'
    required: true
  token:
    description: 'Token to github'
    required: true
  git-reference:
    description: 'Git reference from where it should be deployed'
    default: "refs/heads/master"
  tabula-git-reference:
    description: 'Git reference from where it should be deployed'
    default: "refs/heads/master"
  resource-access-key:
    description: 'Resource AWS Access Key from secrets'
    required: true
    default: ""
  resource-secret-key:
    description: 'Resource AWS Secret Key from secrets'
    required: true
    default: ""
  resource-default-region:
    description: 'Resource AWS Default Region from secrets'
    required: true
    default: ""
  resource-account-id:
    description: 'Resource AWS Account ID for ECR  from secrets'
    required: true
    default: ""
  ci-env:
    description: 'Env type'
    default: "development"
  tabula-url:
    description: 'tabula url'
    default: ""
  website-url:
    description: 'website url'
    default: ""
  memcached-hosts:
    description: 'memcached hosts'
    default: ""
  cluster-name:
    description: 'ECS Cluster name'
    default: ""
  netsuite-sqs-url:
    description: 'netsuite-sqs-url'
    default: ""
  docker-path:
    description: 'Path where dockerfile located'
    default: "/home/runner/work/tabula-automation-tests/tabula-automation-tests/"
    required: true

runs:
  using: "composite"
  steps: 
    - name: Define variables 
      run: |
           echo "TEMPENV_VERSION=${{ inputs.tempenv-version }}" >> $GITHUB_ENV
           echo "AWS_ACCESS_KEY_ID=${{ inputs.access-key }}" >> $GITHUB_ENV
           echo "AWS_SECRET_ACCESS_KEY=${{ inputs.secret-key }}" >> $GITHUB_ENV
           echo "AWS_DEFAULT_REGION=${{ inputs.default-region }}" >> $GITHUB_ENV
           echo "DB_DEFAULT_DATABASE=${{ inputs.tempenv-version }}-tabservices" >> $GITHUB_ENV
      shell: bash

    - name: Checkout devops infra repo
      uses: actions/checkout@v3
      with:
        repository: eScribers/DEVOPS
        ref: ${{ inputs.git-reference }}
        token: ${{ inputs.token }}

    - name: Checkout tabula infra repo
      uses: actions/checkout@v3
      with:
        repository: eScribers/tabula
        ref: ${{ inputs.tabula-git-reference }}
        path: tabula
        token: ${{ inputs.token }}

    - name: Define environment DOCKERFILE_TAG
      run: |
        echo DOCKERFILE_TAG=$(cksum tabula/Dockerfile.base | awk {'print $1'}) >> $GITHUB_ENV
      shell: bash

    - name: Check file existence
      id: check_files
      uses: andstor/file-existence-action@v1
      with:
        files: "./tabula/Dockerfile.deploy.j2"

    - name: configure Dockerfile.deploy
      if: steps.check_files.outputs.files_exists == 'true'
      uses: cuchi/jinja2-action@v1.2.0
      with:
        template: ./tabula/Dockerfile.deploy.j2
        output_file: ./tabula/Dockerfile.deploy
        strict: true
        variables: |
          DOCKERFILE_TAG=${{ env.DOCKERFILE_TAG }}

    # - name: DEBUG Etag from S3
    #   run: |
    #     ls -l ./tabula/*
    #   shell: bash

    - name: Create DynamoDB lock table
      run: |
        aws dynamodb create-table --table-name lock-dynamo-state${{ env.TEMPENV_VERSION }}-terraform-state \
          --attribute-definitions \
            AttributeName=LockID,AttributeType=S \
          --provisioned-throughput \
            ReadCapacityUnits=20,WriteCapacityUnits=20 \
          --key-schema \
            AttributeName=LockID,KeyType=HASH || true
      env:
        TEMPENV_VERSION: "${{ env.TEMPENV_VERSION }}"
      shell: bash
####### Check for paralel execution #############
    - name: Get Etag from S3
      id: s3_etag
      run: |
        echo "S3_ETAG=$(aws s3api head-object --bucket escribers-infra-tempenv-terraform-state --key state${{ env.TEMPENV_VERSION }}.tfstate --query ETag --output text | tr -d \")" >> $GITHUB_ENV
      shell: bash

    - name: DEBUG Etag from S3
      run: |
        echo =${{ env.S3_ETAG }}=
      shell: bash

    - name: Get Digest from DynamoDB
      id: dyn_digest
      run: |
        echo "DYN_DIGEST=$(aws dynamodb scan --table-name lock-dynamo-state${{ env.TEMPENV_VERSION }}-terraform-state | jq '.Items | .[] | select(.Digest.S != null) | .Digest.S' || echo ${{ env.S3_ETAG }} | tr -d \")" >> $GITHUB_ENV
      shell: bash

    - name: DEBUG Etag from S3
      run: |
        echo =${{ env.DYN_DIGEST }}=
      shell: bash

    - name: Replace empty DYN_DIGEST
      if: ${{ env.DYN_DIGEST == '' }}
      run: |
        echo "DYN_DIGEST=${{ env.S3_ETAG }}" >> $GITHUB_ENV
      shell: bash

    - name: DEBUG Etag from S3
      run: |
        echo =${{ env.DYN_DIGEST }}=
      shell: bash

    # - name: DEBUG
    #   run: |
    #        ls -l ./tabula/*
    #        pwd
    #   shell: bash

    - name: Setup create_db.php file
      uses: cuchi/jinja2-action@v1.2.0
      with:
        template: ./tabula/.github/scripts/create_db.php
        output_file: ./tabula/create_db.php
        strict: true
        variables: |
          DB_DEFAULT_PASSWORD=${{ env.DB_DEFAULT_PASSWORD }}
          DB_DEFAULT_USER=${{ env.DB_DEFAULT_USER }}
          DB_DEFAULT_DATABASE=${{ env.DB_DEFAULT_DATABASE }}
          RDS_ENDPOINT=tabula-testenv-shared-db.cxasnj3we6wl.us-east-1.rds.amazonaws.com

    - name: Setup delete_db.php file
      uses: cuchi/jinja2-action@v1.2.0
      with:
        template: ./tabula/.github/scripts/delete_db.php
        output_file: ./tabula/delete_db.php
        strict: true
        variables: |
          DB_DEFAULT_PASSWORD=${{ env.DB_DEFAULT_PASSWORD }}
          DB_DEFAULT_USER=${{ env.DB_DEFAULT_USER }}
          DB_DEFAULT_DATABASE=${{ env.DB_DEFAULT_DATABASE }}
          RDS_ENDPOINT=tabula-testenv-shared-db.cxasnj3we6wl.us-east-1.rds.amazonaws.com

    - name: "Create Docker image and push it to ECR repository"
      uses: "kciter/aws-ecr-action@v4"
      with:
        access_key_id: "${{ inputs.resource-access-key }}"
        secret_access_key: "${{ inputs.resource-secret-key }}"
        account_id: "${{ inputs.resource-account-id }}"
        create_repo: 'true'
        dockerfile: tabula/Dockerfile.deploy
        extra_build_args: ''
        path: ${{ inputs.docker-path }}/tabula
        region: "${{ inputs.resource-default-region }}"
        repo: "ecr${{ env.TEMPENV_VERSION }}/tabula"
        tags: "${{ github.sha }}"

    - name: Intall terraform
      run: |
        which terraform
        sudo rm /usr/local/bin/terraform
        curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
        sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
        sudo apt-get -qq update
        sudo apt-get -qq install terraform=0.14.10
        which terraform
      shell: bash

    - name: Check terraform version
      run: terraform --version
      shell: bash


 # For some reason teraform not seeing spot instance in first run (even after pause). It should be running second time to refresh state and get information about spot resource 
    - name: Deploy infrastructure
      # if: always()
      run: |
        mv ./infrastructure/instances-spot.tf.off ./infrastructure/instances-spot.tf
        terraform -chdir=./infrastructure init -backend-config="bucket=escribers-infra-tempenv-terraform-state" -backend-config="key=state$TEMPENV_VERSION.tfstate" -backend-config="dynamodb_table=lock-dynamo-state$ENV_NAME-terraform-state"
        terraform -chdir=./infrastructure apply -auto-approve 
        echo "Wait for 30 seconds"
        echo "VPN_SERVER_PRIVATE_IP=$(cat infrastructure/private_ip)" >> $GITHUB_ENV
        echo "VPN_SERVER_PUBLIC_IP=$(cat infrastructure/public_ip)" >> $GITHUB_ENV
      env:
        AWS_ACCESS_KEY_ID: "${{ env.AWS_ACCESS_KEY_ID }}"
        AWS_SECRET_ACCESS_KEY: "${{ env.AWS_SECRET_ACCESS_KEY }}"
        AWS_DEFAULT_REGION: "${{ env.AWS_DEFAULT_REGION }}"    
        TF_VAR_aws_region: "${{ env.AWS_DEFAULT_REGION }}" 
        TF_VAR_env_name: "${{ env.TEMPENV_VERSION }}"
        TF_VAR_do_migration: "false"
        TF_VAR_deletion_protection: "false"
        TF_VAR_instance_count: "3"
        TF_VAR_image_tag: "${{ github.sha }}"
        TF_VAR_image: "${{ inputs.resource-account-id }}.dkr.ecr.${{ inputs.resource-default-region }}.amazonaws.com/ecr${{ env.TEMPENV_VERSION }}/tabula"
        TEMPENV_VERSION: "${{ env.TEMPENV_VERSION }}"
        TF_VAR_ci_env: "${{ inputs.ci-env }}"
        TF_VAR_tabula_url: "${{ inputs.tabula-url }}"
        TF_VAR_website_url: "${{ inputs.website-url }}"
        TF_VAR_memcached_hosts: "${{ inputs.memcached-hosts }}"
        TF_VAR_cluster_name: "${{ inputs.cluster-name }}"
        TF_VAR_netsuite_sqs_url: "${{ inputs.netsuite-sqs-url }}"
        TF_VAR_tab_database: "${{ env.DB_DEFAULT_DATABASE }}"
      shell: bash

    - name: Define variables for VPN servers
      run: |
        echo "VPN_SERVER_PRIVATE_IP=$(cat infrastructure/private_ip)" >> $GITHUB_ENV
        echo "VPN_SERVER_PUBLIC_IP=$(cat infrastructure/public_ip)" >> $GITHUB_ENV
      shell: bash

    - name: Get VPN Profile
      run: |
        echo $VPN_SERVER_PUBLIC_IP
        echo =====================================
        echo $VPN_SERVER_PRIVATE_IP
      env:
        VPN_SERVER_PRIVATE_IP: "${{ env.VPN_SERVER_PRIVATE_IP }}" 
        VPN_SERVER_PUBLIC_IP: "${{ env.VPN_SERVER_PUBLIC_IP }}" 
      shell: bash

    - name: Upload private_ip
      uses: actions/upload-artifact@v1
      with:
        name: private_ip
        path: infrastructure/private_ip
          
    - name: Upload public_ip
      uses: actions/upload-artifact@v1
      with:
        name: public_ip
        path: infrastructure/public_ip



